■ 開発
ウォーターフォール開発
	開発手順を1つずつ確認しながら工程を進めていく手法、次のフェーズに進んでしまうと後戻りができない手法
	スケジュールを立てやすい、予算やSEの手配がスムーズに行える、進行中に問題発生した時に手間がかかる、成果物作成に時間がかかる
アジャイル開発
	クライアントの要望に応えるシステムをできる限り素早くリリースしようという考えに基づいている開発手法
	1.要件定義　2.基本設計　3.詳細設計　4.実装　5.単体テスト　6.結合テスト　7.総合テスト　8.受入テスト
（参考画像　https://backlog.com/wp-blog-app/uploads/sites/6/2019/10/article-image02-2.png）

マイグレーション（Migration）
	既存システムやソフトウェア、データなどを別の環境に移転したり、新しい環境に移行すること
デグレーション（degradation）
	プログラムの不具合を修正したときに、ほかに新たな不具合が出てくること
デプロイ（deploy）
	開発したソフトウェアを実際の運用環境に配置・展開して実用に供すること
コンフリクト（Conflict）
	複数の装置やプログラムなどが同じ資源を同時に利用しようとして競合状態になってしまうこと
	同時に複数の更新要求が発生し、内容が損なわれたり要求が拒絶されるなど正常に処理できない状態

環境
　開発環境（ローカル）
	実際のサーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行うこと
　検証環境（ステージング）
	番環境に条件を限りなく近づけた「最終テスト用に用いる、本番環境と類似のテスト環境」
　本番環境
	実際にシステムが稼働している環境のこと

設計書／仕様書
　要件定義
	本格的な開発工程の前段階で、開発者の視点から要求をまとめ、具体的な進め方を決めること（ユーザーが何を必要としているかを定義したもの）
　基本設計書
	要件定義の内容を元に、システムを外から見たときどういう動きをするかを決めるもの（どのような画面になるかなど）
　詳細設計書
	基本設計で決められた動きを、どうやって実現するかを決めるもの

テスト
　単体テスト（UT）Unit Test
	プログラムを構成する比較的小さな単位（ユニット）が個々の機能を正しく果たしているかどうかを検証するテスト（モジュールごとにテスト）
　結合テスト（CT／IT）Integration Test
	単体で動作するようになったコンポーネントを組み合わせることで実際に動作する状態に近いソフトウェアの挙動を確認するテスト
　総合テスト（ST）System Test
	 構築したシステムが全体で予定通りの機能を満たしているか、また機能や性能が仕様書通りに構築できているかを検証するテスト（本番とほぼ同じ環境でテストを実施）
エビデンス／証跡
	テスト工程などでシステムが正しく動作している、あるいは不具合が生じたことを示す証拠となる書類やデータなどを指す
データパッチ（patch）
	ソフトウェアを構成するプログラムやデータを更新・修正するために、新しい版との相違点を抜き出したデータ（ソフトに変更を加えるために用意された、後付けのプログラム）
Access
	Microsoftが提供するデータベース管理ソフト　データベースの作成からデータの追加、更新、削除などの機能もあり、大規模なデータも取得しやすくデータ分析にも活用できる
マクロ
	関連する複数の操作や手順、命令などを一つにまとめ、必要に応じて呼び出すことができるようにする機能（録音再生のように、あらかじめ記録した操作を行うという機能）
　VBA（Visual Basic for Applications）
	Microsoft Officeに含まれるアプリケーションソフトの拡張機能　「簡易なプログラムを記述」して実行することで複雑な処理の自動化などを行なうことができるもの
GAS（Google Apps Script）
	JavaScriptベースのプログラミング言語　Google Appsの拡張や連携ができる
API（Application Programming Interface）
	アプリケーションやソフトウェアの構築と統合 (インテグレーション) に使われるツール、定義、プロトコル
　WEB API
	コンピュータプログラムの提供する機能を外部の別のプログラムから呼び出して利用するための手順・規約（API）の類型の一つ、HTTPなどWebの技術を用いて構築されたもの
　REST API（REpresentational State Transfer API）
	REST= HTTPでリソースへアクセスができる　HTTPメソッドを適切に利用する　ウェブのリソースは固有のリソースを持っている
	REATの考え方に沿って作られたAPI　適切なHTTPメソッドを使い、ウェブ上の固有のURIへアクセスできるAPI
　SOAP (Simple Object Access Protocol) 
Ajax（Asynchronous JavaScript + XML）
	Webページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、動的に表示内容を変更する手法
　XML（Extensible Markup Language）
	文章の見た目や構造を記述するためのマークアップ言語の一種　データ記述用の言語で文書中のデータをわかりやすくしたり、データを交換したりする
　JSON（JavaScript Object Notation）
	JavaScriptのオブジェクトの書き方を元にしたデータ定義方法　PythonやJava、PHPなどの幅広い言語で使われている
　ステータスコード
	システムが処理結果や現在の状態を外部に知らせるために発する数字や短い符号　エラーコードとも呼ばれる
　クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）オリジン間リソース共有
	Webサーバに特殊なHTTPヘッダ項目を追加することで、送り出したWebページ上のスクリプトがWebブラウザから別のサーバへアクセスできるようにすること
	オリジン= URLのうち、URIスキーム（http://かhttps://かの違い）、ホスト名、ポート番号の組み合わせ
バリデーション（validation）
	対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証するという意味

データ連携
　Daemon
	UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム　利用者の操作とは無関係に処理を行うバックグラウンドプロセスの一種
　CRON
	デーモンの一種で、利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの
　バッチ（Batch）
	「ひと束」「一群」「1回分にまとめる」という意味　バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式を指す
	複数のプログラムやファイル転送コマンドなどの実行順序を定義し、大量のデータを一括処理する。処理の単位を「バッチ」と呼ぶ。
　ログ
	コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録を指す
　CSV（Comma Separated Value）
	値や項目をカンマで区切って書いたテキストファイル・データのこと。ファイルの拡張子は「.csv」
　TSV（Tab Separated Value）
	データをタブで区切って並べたテキストファイル・データのこと。ファイルの拡張子は「.tsv」
プルリクエスト（マージリクエスト）
	開発者のローカルリポジトリでの変更を他の開発者に通知する機能

■ チケット管理ツール
　asana
	ワークマネジメントプラットフォーム　一つの仕事を回すだけでなく社内の業務全体を見える化して、最適な形へ調整しやすくするためのもの
　Backlog
	コラボレーション型プロジェクト管理ツール　企画・マーケティング・総務の各種業務から、製造・開発のプロジェクトまで、様々なタスク管理に活用できる
　Jooto
	ラウド型のタスク管理ツール　シンプルで直感的な操作で簡単にタスクを一元管理でき、チームでの情報共有やチャットによる気軽な連絡も可能
　Redmine
	プロジェクト管理ができるオープンソースソフトウェア　やるべき作業を記録・管理したり社内で情報共有ができる
　Trello
	プロジェクトと個人タスクを管理するためのオンラインツール　カードを動かしながらタスクを視覚的に管理できるカンバン方式のツール

■ バージョン管理
　集中型
	一つのコンピュータなどにのみ機能を依存している処理形態のこと
　分散型
	複数のコンピュータなどに分散して機能を持たせること、またはそれで一つの機能を動作させる考え方
　Github
	エンジニア各々が公開用のプログラムをアップして自分以外のエンジニアに共有。その後履歴を残しながら更新したり、自分以外のエンジニアも修正を加えることが可能
　Backlog
　SourceTree
	Gitの分散管理システムツール操作を効率的に扱うGUI　 WindowsとMacのOS両方に対応、チームで行うプログラム構築作業など、基軸となるプログラムを元に共同開発ができる
　Tortoise SVN（トータスエスブイエヌ）
	Subversionのクライアントフロントエンド（各種入力をユーザーから受け取り、バックエンドが使える仕様に合うようにそれを加工する役目を担う）となるソフトウェア
Git Flow
	プラグイン(ツール)のこと　Gitにおけるリポジトリの分岐モデルであり、ルールのことを指す
　master
	プロダクトとしてリリースする用のブランチ。リリースしたらタグ付けする
　release
	プロダクトリリースの準備用。リリース予定の機能やバグフィックスが反映された状態のdevelopから分岐する。準備が整ったらmasterにマージすると共にdevelopにマージする
　develop
	開発用ブランチ。コードが安定し、リリース準備ができたらreleaseへマージする
　feature
	機能の追加用。developから分岐し、developにマージする

■ FW／ライブラリ
FW
　Spring Framework
	Javaの開発環境で使用できるオープンソースのフレームワーク　特徴：AOPとDIと呼ばれる概念で構築されていること、専用のテストプログラムがある
　Struts　正式名「Apache Struts」
	JavaによるWebアプリケーション用のフレームワーク
　JSF（Java Server Faces）
	Java EEに搭載されたJava言語におけるフレームワークの一種　簡単に高性能なWebアプリのインターフェースが作成可能

ライブラリ
　Bootstrap
	HTML/CSS/JavaScriptから構成される最も有名なWEBフレームワーク　特徴：知識がなくても使える、デザイン性の確保、レスポンシブWEBデザイン
　Flyway
	データベースのスキーマに対してバージョン管理するツール
　Jackson
	JSON形式のデータを処理するための高速かつ軽量なJavaライブラリ
　jQuery
	JavaScriptのためのライブラリ
　Junit
	Javaプログラムの単体テストを行うためのツール
　Log4j
	Jakarta プロジェクトで開発が進められている Java プログラム用のログ API 
　Lombok
	Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ
　ORM（Object-relational mapping）
	データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法　オブジェクト関連マッピングとも呼ぶ
	インピーダンス・ミスマッチ（設計思想の違い）を解消して関係データベース（RDB）のレコードを、オブジェクトとして直感的に扱えるようにする

■ 連絡ツール
　ChatWork
	ビジネスコミュニケーションに特化したチャットツール　チャット機能やファイル送信機能など、チャットのビジネス利用をスムーズに進めるための機能が充実
　Slack
	SaaS型のチャット形式でコミュニケーションを取ることを目的としたツール
　IP Messenger
	LAN 用メッセンジャーソフト　同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる

■ Java
Javadoc
	Java言語のソースコードに一定の書式でコメントを記述することで、クラスの説明やメソッドの呼び出し方などの仕様をHTMLなどの文書形式でまとめてくれる仕組み
アノテーション
	あるデータに対して関連する情報を注釈として付与すること　AI業界では、機械学習のモデルに学習させるための教師データ（正解データ、ラベル）を作成することを指す
メモリ管理
　ヒープ
	データ構造の一種で、ツリー構造のうち、親要素が子要素より常に大きい（あるいは小さい）という条件を満たすもの
	コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や解放が可能なものをヒープ領域というが、これをヒープと略す
　GC（garbage collection）
	コンピュータプログラムの実行環境などが備える機能の一つ
	実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、空き領域として再利用できるようにするもの
GoF（Gang of Four）
	オブジェクト指向プログラミングにおける再利用性の高いコーディングのパターン、デザインパターンをまとめた4人のプログラマのことを指す
デザインパターン
	オブジェクト指向プログラミングにおいて用いられている再利用性の高いコーディングのパターン　GoFによって書籍で発表されたもの

■ その他
オブジェクト指向
	プログラムを「さわったり見たり動かしたりできる」、モノの集合体ととらえる発想
バッチ処理
コンパイル
	プログラミング言語で書かれたコンピュータプログラム（ソースコード）を解析し、コンピュータが直接実行可能な形式のプログラム（オブジェクトコード）に変換すること
カバレッジ
	ソフトウェアのプログラム全体に対してテストが終了（カバー）した割合や、実行可能な条件の中でどのテストが済んだのかを表す
	テストカバレッジ　コードカバレッジ（プログラムコード全体に対して）　エリアカバレッジ（電波の送受信可能な地域）　機能カバレッジ（仕様書、要件に対するテスト）
プラットホーム
	ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ（動作環境）のこと
